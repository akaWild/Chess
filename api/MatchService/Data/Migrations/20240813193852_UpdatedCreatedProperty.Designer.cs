// <auto-generated />
using System;
using MatchService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MatchService.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240813193852_UpdatedCreatedProperty")]
    partial class UpdatedCreatedProperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MatchService.Models.Match", b =>
                {
                    b.Property<Guid>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AILevel")
                        .HasColumnType("integer");

                    b.Property<string>("Acceptor")
                        .HasColumnType("text");

                    b.Property<int?>("ActingSide")
                        .HasColumnType("integer");

                    b.Property<int?>("BlackSideTimeRemaining")
                        .HasColumnType("integer");

                    b.Property<string>("Board")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DrawBy")
                        .HasColumnType("integer");

                    b.Property<int?>("DrawRequestedSide")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ExtraTimePerMove")
                        .HasColumnType("integer");

                    b.Property<string[]>("History")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime?>("LastMoveMadeAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("integer");

                    b.Property<string>("WhiteSidePlayer")
                        .HasColumnType("text");

                    b.Property<int?>("WhiteSideTimeRemaining")
                        .HasColumnType("integer");

                    b.Property<int?>("WinBy")
                        .HasColumnType("integer");

                    b.Property<string>("Winner")
                        .HasColumnType("text");

                    b.HasKey("MatchId");

                    b.ToTable("Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
